//  This file is part of Empirical, https://github.com/mercere99/Empirical/
//  Copyright (C) Michigan State University, 2016.
//  Released under the MIT Software license; see doc/LICENSE
//
//
//  This file contains functions that all run at compile time to produce a constant value.


#ifndef EMP_CONST_UTILS_H
#define EMP_CONST_UTILS_H

namespace emp {
namespace constant {

  constexpr const double log2_chart_1_2[] =
  {
    0, 0.00140819, 0.00281502, 0.00422047, 0.00562455, 0.00702727, 0.00842862, 0.00982862,
    0.0112273, 0.0126245, 0.0140205, 0.0154151, 0.0168083, 0.0182002, 0.0195907, 0.0209799,
    0.0223678, 0.0237544, 0.0251396, 0.0265234, 0.027906, 0.0292872, 0.0306671, 0.0320457,
    0.033423, 0.034799, 0.0361736, 0.037547, 0.038919, 0.0402897, 0.0416592, 0.0430273,
    0.0443941, 0.0457597, 0.0471239, 0.0484869, 0.0498485, 0.0512089, 0.0525681, 0.0539259,
    0.0552824, 0.0566377, 0.0579917, 0.0593445, 0.0606959, 0.0620461, 0.0633951, 0.0647428,
    0.0660892, 0.0674344, 0.0687783, 0.0701209, 0.0714624, 0.0728025, 0.0741415, 0.0754791,
    0.0768156, 0.0781508, 0.0794848, 0.0808175, 0.082149, 0.0834793, 0.0848084, 0.0861362,
    0.0874628, 0.0887882, 0.0901124, 0.0914354, 0.0927571, 0.0940777, 0.095397, 0.0967152,
    0.0980321, 0.0993478, 0.100662, 0.101976, 0.103288, 0.104599, 0.105909, 0.107217,
    0.108524, 0.109831, 0.111136, 0.11244, 0.113742, 0.115044, 0.116344, 0.117643,
    0.118941, 0.120238, 0.121534, 0.122828, 0.124121, 0.125413, 0.126704, 0.127994,
    0.129283, 0.130571, 0.131857, 0.133142, 0.134426, 0.135709, 0.136991, 0.138272,
    0.139551, 0.14083, 0.142107, 0.143383, 0.144658, 0.145932, 0.147205, 0.148477,
    0.149747, 0.151017, 0.152285, 0.153552, 0.154818, 0.156083, 0.157347, 0.15861,
    0.159871, 0.161132, 0.162391, 0.16365, 0.164907, 0.166163, 0.167418, 0.168672,
    0.169925, 0.171177, 0.172428, 0.173677, 0.174926, 0.176173, 0.17742, 0.178665,
    0.179909, 0.181152, 0.182394, 0.183635, 0.184875, 0.186114, 0.187352, 0.188589,
    0.189825, 0.191059, 0.192293, 0.193525, 0.194757, 0.195987, 0.197217, 0.198445,
    0.199672, 0.200899, 0.202124, 0.203348, 0.204571, 0.205793, 0.207014, 0.208234,
    0.209453, 0.210671, 0.211888, 0.213104, 0.214319, 0.215533, 0.216746, 0.217958,
    0.219169, 0.220378, 0.221587, 0.222795, 0.224002, 0.225207, 0.226412, 0.227616,
    0.228819, 0.23002, 0.231221, 0.232421, 0.23362, 0.234817, 0.236014, 0.23721,
    0.238405, 0.239599, 0.240791, 0.241983, 0.243174, 0.244364, 0.245553, 0.246741,
    0.247928, 0.249113, 0.250298, 0.251482, 0.252665, 0.253847, 0.255029, 0.256209,
    0.257388, 0.258566, 0.259743, 0.26092, 0.262095, 0.263269, 0.264443, 0.265615,
    0.266787, 0.267957, 0.269127, 0.270295, 0.271463, 0.27263, 0.273796, 0.27496,
    0.276124, 0.277287, 0.278449, 0.279611, 0.280771, 0.28193, 0.283088, 0.284246,
    0.285402, 0.286558, 0.287712, 0.288866, 0.290019, 0.291171, 0.292322, 0.293472,
    0.294621, 0.295769, 0.296916, 0.298063, 0.299208, 0.300353, 0.301496, 0.302639,
    0.303781, 0.304922, 0.306062, 0.307201, 0.308339, 0.309476, 0.310613, 0.311748,
    0.312883, 0.314017, 0.31515, 0.316282, 0.317413, 0.318543, 0.319672, 0.320801,
    0.321928, 0.323055, 0.324181, 0.325305, 0.326429, 0.327553, 0.328675, 0.329796,
    0.330917, 0.332037, 0.333155, 0.334273, 0.33539, 0.336507, 0.337622, 0.338736,
    0.33985, 0.340963, 0.342075, 0.343186, 0.344296, 0.345405, 0.346514, 0.347621,
    0.348728, 0.349834, 0.350939, 0.352043, 0.353147, 0.354249, 0.355351, 0.356452,
    0.357552, 0.358651, 0.35975, 0.360847, 0.361944, 0.36304, 0.364135, 0.365229,
    0.366322, 0.367415, 0.368506, 0.369597, 0.370687, 0.371777, 0.372865, 0.373953,
    0.375039, 0.376125, 0.377211, 0.378295, 0.379378, 0.380461, 0.381543, 0.382624,
    0.383704, 0.384784, 0.385862, 0.38694, 0.388017, 0.389094, 0.390169, 0.391244,
    0.392317, 0.39339, 0.394463, 0.395534, 0.396605, 0.397675, 0.398744, 0.399812,
    0.400879, 0.401946, 0.403012, 0.404077, 0.405141, 0.406205, 0.407268, 0.40833,
    0.409391, 0.410451, 0.411511, 0.41257, 0.413628, 0.414685, 0.415742, 0.416798,
    0.417853, 0.418907, 0.41996, 0.421013, 0.422065, 0.423116, 0.424166, 0.425216,
    0.426265, 0.427313, 0.42836, 0.429407, 0.430453, 0.431498, 0.432542, 0.433585,
    0.434628, 0.43567, 0.436712, 0.437752, 0.438792, 0.439831, 0.440869, 0.441907,
    0.442943, 0.44398, 0.445015, 0.446049, 0.447083, 0.448116, 0.449149, 0.45018,
    0.451211, 0.452241, 0.453271, 0.454299, 0.455327, 0.456354, 0.457381, 0.458407,
    0.459432, 0.460456, 0.461479, 0.462502, 0.463524, 0.464546, 0.465566, 0.466586,
    0.467606, 0.468624, 0.469642, 0.470659, 0.471675, 0.472691, 0.473706, 0.47472,
    0.475733, 0.476746, 0.477758, 0.47877, 0.47978, 0.48079, 0.481799, 0.482808,
    0.483816, 0.484823, 0.485829, 0.486835, 0.48784, 0.488844, 0.489848, 0.490851,
    0.491853, 0.492855, 0.493855, 0.494856, 0.495855, 0.496854, 0.497852, 0.498849,
    0.499846, 0.500842, 0.501837, 0.502832, 0.503826, 0.504819, 0.505812, 0.506803,
    0.507795, 0.508785, 0.509775, 0.510764, 0.511753, 0.51274, 0.513728, 0.514714,
    0.5157, 0.516685, 0.517669, 0.518653, 0.519636, 0.520619, 0.5216, 0.522582,
    0.523562, 0.524542, 0.525521, 0.526499, 0.527477, 0.528454, 0.529431, 0.530406,
    0.531381, 0.532356, 0.53333, 0.534303, 0.535275, 0.536247, 0.537218, 0.538189,
    0.539159, 0.540128, 0.541097, 0.542065, 0.543032, 0.543998, 0.544964, 0.54593,
    0.546894, 0.547859, 0.548822, 0.549785, 0.550747, 0.551708, 0.552669, 0.553629,
    0.554589, 0.555548, 0.556506, 0.557464, 0.558421, 0.559377, 0.560333, 0.561288,
    0.562242, 0.563196, 0.564149, 0.565102, 0.566054, 0.567005, 0.567956, 0.568906,
    0.569856, 0.570804, 0.571753, 0.5727, 0.573647, 0.574594, 0.575539, 0.576484,
    0.577429, 0.578373, 0.579316, 0.580259, 0.581201, 0.582142, 0.583083, 0.584023,
    0.584963, 0.585901, 0.58684, 0.587778, 0.588715, 0.589651, 0.590587, 0.591522,
    0.592457, 0.593391, 0.594325, 0.595257, 0.59619, 0.597121, 0.598053, 0.598983,
    0.599913, 0.600842, 0.601771, 0.602699, 0.603626, 0.604553, 0.60548, 0.606405,
    0.60733, 0.608255, 0.609179, 0.610102, 0.611025, 0.611947, 0.612868, 0.613789,
    0.61471, 0.61563, 0.616549, 0.617467, 0.618386, 0.619303, 0.62022, 0.621136,
    0.622052, 0.622967, 0.623881, 0.624795, 0.625709, 0.626622, 0.627534, 0.628446,
    0.629357, 0.630267, 0.631177, 0.632086, 0.632995, 0.633903, 0.634811, 0.635718,
    0.636625, 0.637531, 0.638436, 0.639341, 0.640245, 0.641149, 0.642052, 0.642954,
    0.643856, 0.644758, 0.645658, 0.646559, 0.647458, 0.648358, 0.649256, 0.650154,
    0.651052, 0.651949, 0.652845, 0.653741, 0.654636, 0.655531, 0.656425, 0.657318,
    0.658211, 0.659104, 0.659996, 0.660887, 0.661778, 0.662668, 0.663558, 0.664447,
    0.665336, 0.666224, 0.667112, 0.667999, 0.668885, 0.669771, 0.670656, 0.671541,
    0.672425, 0.673309, 0.674192, 0.675075, 0.675957, 0.676839, 0.67772, 0.6786,
    0.67948, 0.68036, 0.681238, 0.682117, 0.682995, 0.683872, 0.684749, 0.685625,
    0.686501, 0.687376, 0.68825, 0.689124, 0.689998, 0.690871, 0.691744, 0.692616,
    0.693487, 0.694358, 0.695228, 0.696098, 0.696968, 0.697836, 0.698705, 0.699572,
    0.70044, 0.701306, 0.702173, 0.703038, 0.703904, 0.704768, 0.705632, 0.706496,
    0.707359, 0.708222, 0.709084, 0.709945, 0.710806, 0.711667, 0.712527, 0.713387,
    0.714246, 0.715104, 0.715962, 0.716819, 0.717676, 0.718533, 0.719389, 0.720244,
    0.721099, 0.721954, 0.722808, 0.723661, 0.724514, 0.725366, 0.726218, 0.72707,
    0.72792, 0.728771, 0.729621, 0.73047, 0.731319, 0.732167, 0.733015, 0.733863,
    0.73471, 0.735556, 0.736402, 0.737247, 0.738092, 0.738937, 0.739781, 0.740624,
    0.741467, 0.742309, 0.743151, 0.743993, 0.744834, 0.745674, 0.746514, 0.747354,
    0.748193, 0.749031, 0.749869, 0.750707, 0.751544, 0.752381, 0.753217, 0.754052,
    0.754888, 0.755722, 0.756556, 0.75739, 0.758223, 0.759056, 0.759888, 0.76072,
    0.761551, 0.762382, 0.763212, 0.764042, 0.764872, 0.7657, 0.766529, 0.767357,
    0.768184, 0.769011, 0.769838, 0.770664, 0.771489, 0.772315, 0.773139, 0.773963,
    0.774787, 0.77561, 0.776433, 0.777255, 0.778077, 0.778898, 0.779719, 0.78054,
    0.78136, 0.782179, 0.782998, 0.783817, 0.784635, 0.785452, 0.78627, 0.787086,
    0.787903, 0.788718, 0.789534, 0.790348, 0.791163, 0.791977, 0.79279, 0.793603,
    0.794416, 0.795228, 0.79604, 0.796851, 0.797662, 0.798472, 0.799282, 0.800091,
    0.8009, 0.801708, 0.802516, 0.803324, 0.804131, 0.804938, 0.805744, 0.80655,
    0.807355, 0.80816, 0.808964, 0.809768, 0.810572, 0.811375, 0.812177, 0.812979,
    0.813781, 0.814582, 0.815383, 0.816184, 0.816984, 0.817783, 0.818582, 0.819381,
    0.820179, 0.820977, 0.821774, 0.822571, 0.823367, 0.824163, 0.824959, 0.825754,
    0.826548, 0.827343, 0.828136, 0.82893, 0.829723, 0.830515, 0.831307, 0.832099,
    0.83289, 0.833681, 0.834471, 0.835261, 0.83605, 0.836839, 0.837628, 0.838416,
    0.839204, 0.839991, 0.840778, 0.841564, 0.84235, 0.843136, 0.843921, 0.844706,
    0.84549, 0.846274, 0.847057, 0.84784, 0.848623, 0.849405, 0.850187, 0.850968,
    0.851749, 0.85253, 0.85331, 0.854089, 0.854868, 0.855647, 0.856426, 0.857203,
    0.857981, 0.858758, 0.859535, 0.860311, 0.861087, 0.861862, 0.862637, 0.863412,
    0.864186, 0.86496, 0.865733, 0.866506, 0.867279, 0.868051, 0.868823, 0.869594,
    0.870365, 0.871135, 0.871905, 0.872675, 0.873444, 0.874213, 0.874981, 0.875749,
    0.876517, 0.877284, 0.878051, 0.878817, 0.879583, 0.880349, 0.881114, 0.881879,
    0.882643, 0.883407, 0.884171, 0.884934, 0.885696, 0.886459, 0.887221, 0.887982,
    0.888743, 0.889504, 0.890264, 0.891024, 0.891784, 0.892543, 0.893302, 0.89406,
    0.894818, 0.895575, 0.896332, 0.897089, 0.897845, 0.898601, 0.899357, 0.900112,
    0.900867, 0.901621, 0.902375, 0.903129, 0.903882, 0.904635, 0.905387, 0.906139,
    0.906891, 0.907642, 0.908393, 0.909143, 0.909893, 0.910643, 0.911392, 0.912141,
    0.912889, 0.913637, 0.914385, 0.915132, 0.915879, 0.916626, 0.917372, 0.918118,
    0.918863, 0.919608, 0.920353, 0.921097, 0.921841, 0.922584, 0.923327, 0.92407,
    0.924813, 0.925554, 0.926296, 0.927037, 0.927778, 0.928518, 0.929258, 0.929998,
    0.930737, 0.931476, 0.932215, 0.932953, 0.933691, 0.934428, 0.935165, 0.935902,
    0.936638, 0.937374, 0.938109, 0.938844, 0.939579, 0.940314, 0.941048, 0.941781,
    0.942515, 0.943247, 0.94398, 0.944712, 0.945444, 0.946175, 0.946906, 0.947637,
    0.948367, 0.949097, 0.949827, 0.950556, 0.951285, 0.952013, 0.952741, 0.953469,
    0.954196, 0.954923, 0.95565, 0.956376, 0.957102, 0.957828, 0.958553, 0.959278,
    0.960002, 0.960726, 0.96145, 0.962173, 0.962896, 0.963619, 0.964341, 0.965063,
    0.965784, 0.966505, 0.967226, 0.967947, 0.968667, 0.969387, 0.970106, 0.970825,
    0.971544, 0.972262, 0.97298, 0.973697, 0.974415, 0.975131, 0.975848, 0.976564,
    0.97728, 0.977995, 0.97871, 0.979425, 0.98014, 0.980854, 0.981567, 0.982281,
    0.982994, 0.983706, 0.984418, 0.98513, 0.985842, 0.986553, 0.987264, 0.987975,
    0.988685, 0.989394, 0.990104, 0.990813, 0.991522, 0.99223, 0.992938, 0.993646,
    0.994353, 0.99506, 0.995767, 0.996473, 0.997179, 0.997885, 0.99859, 0.999295
  };

  namespace internal {
    // A compile-time log calculator for values [1,2)
    static constexpr double Log2_base(double x) {
      return log2_chart_1_2[(int)((x-1.0)*1024)];
    }

    // A compile-time log calculator for values < 1
    static constexpr double Log2_frac(double x) {
      return (x >= 1.0) ? Log2_base(x) : (Log2_frac(x*2.0) - 1.0);
    }

    // A compile-time log calculator for values >= 2
    static constexpr double Log2_pos(double x) {
      return (x < 2.0) ? Log2_base(x) : (Log2_pos(x/2.0) + 1.0);
    }

  }

  // And a more generic compile-time log calculator.
  template <typename TYPE>
  static constexpr double Log2(TYPE x) {
    return (x < 1.0) ? internal::Log2_frac(x) : internal::Log2_pos(x);
  }


  // A compile-time exponentiation calculator.
  template <typename TYPE>
  static constexpr TYPE IntPow(TYPE base, TYPE exp) {
    return exp < 1 ? 1 : (base * IntPow(base, exp-1));
  }

  // A compile-time int-log calculator (aka, significant bits)
  template <typename TYPE>
  static constexpr int IntLog2(TYPE x) {
    return x <= 1 ? 0 : (IntLog2(x/2) + 1);
  }

  // A compile-time bit counter.
  template <typename TYPE>
  static constexpr int CountOnes(TYPE x) {
    return x == 0 ? 0 : (CountOnes(x/2) + (x&1));
  }

  // Quick bit-mask generators...
  template <typename TYPE>
  static constexpr TYPE MaskLow(int num_bits) {
    return (num_bits == 8*sizeof(TYPE)) ? -1 : ((((TYPE)1) << num_bits) - 1);
  }

  template <typename TYPE>
  static constexpr TYPE MaskHigh(int num_bits) {
    return MaskLow<TYPE>(num_bits) << (8*sizeof(TYPE)-num_bits);
  }


}
}

#endif
