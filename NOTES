-= Next Steps =-
In UI Elements change Update() to Redraw() throughout (to indicate that it starts drawing from
scratch) and add in a Refresh() to just make new changes.  Particular important w/canvas.

Incorporate Ben's changes into BitVector/BitSet
(work on applications of library and see what needs to be fixed/added)
Setup documentation outside of the code!

-= Questions =-
Best way to convert to a c++ literal independent of type?
How to dynamically change an include file?
Have multi-purpose headers with static functions; how can I prevent those specific unused function errors while still getting others that I don't specifically block?

-= Fixes =-
Make CSS method virtual so others (width/height/etc) call the proper version when its overloaded.
JSDelete should make sure that we are not deleting a named function (or cleanup JS side too!)
fix how is_valid() functions are handled in string_utils.h
Make sure to check append_ok in slates; use SFINAE to test if input is a command in << before
  forwarding to Append.  Commands should occur, true appends should now.  (Maybe change the
  name to Comamnd when not appending as long as we're detecting anyway?)
Closing a Text() element should automatically run PreventAppend();

-= Improvements =-
Tables should have single CSS for all rows and all cells.
- Remove ID's from table cells and rows; manually fill out style instead.
Allow addition of defaults UI::Style for each object type.
-Allow UI::Style objects to be added as a whole to widgets.
-Create a UI::StyleGroup that elements can be added to and altered as one (use proper CSS class?)
Base document should register where keypresses should be directed.
-Buttons should be able to have a hotkey (or more than one?)
BitSet should have a non-emscripten version that uses 64-bits (same as BitVector)
Setup a disabled_CSS for buttons that they apply when disabled?
Allow Slates to have alternate children sets for rapid swapping to a new mode.
Setup Elements to be able to run in unit tests.

-= Improvements to Consider =-
Slates should have a current location and always "append" at that location, not just at end.
- Forwarding to a parent should track where the forward came from to update location information.
Adjust Elements so that Widget name comes first.  E.g., ButtonElement instead of ElementButton

-= New Elements =-
Canvas
Forms
Tabs
Settings (that can be initialized with a config object)
Placeholder (?) for future references (empty span?)
Dynamic link? (Easy to change, rather than existing like which is embeded in text.)


-= General tools to build =-
A more automated test system
Serialization helpers
- Option 1: Use only emp-specific types in classes that can be easily saved?
            (Makes coding harder)
- Option 2: #define overrides for types?  (tricky to get right, especially for STL types)
- Option 3: Require manual save a load functions?  (Requires all programmers to always keep updated,
            but might be possible with good automated test system.)
A data management system that can track data by:
  - Temporal series (values over time)
  - Batch (where a batch reset occurs periodicall)
  - Log (tracking particular events when they occur)
  All output files should have headers that allow them to be read back in more easily.
A citation tool: Useful for pointing people to appropriate references & building online bibs.

-= Evolution-specific Tools =-
Organism Object (Contains Genome and templated on virtual hardware type)
Genotype manager (for organisms with identical genomes)
Phenotype summary to include in the genotype
Phylogeny/lineage manager with multiple modes of purging (and link to phenotypes?)
Clade manager that will mark into phenotypes which clades they are associated with

-= Optimizations to Explore =-
Should quick-lookup for sin, cos, tan be at higher resolution (now it's 256 entires)?
Fix how sectors are handled in surfaces to be more dynamic based on sizes of organisms.
- Consider sorting organisms by size and processing smallest first?
  Then any particular comparison is only up against as small or smaller.
- Test only objects that have moved (against all objects)
- Sort all objects within bands?

-= Improvements that rquire more thought... =-
InstLib: Can we lock a set of instruction at compile time?  Or at least put them in a fixed array?
Change HardwareCPU to something linke Hardware_SimpleCPU and Instruction to Instruction_SimpleCPU
Come up with a cleaner method to time functions?  Current macro is pretty ugly.

-= Specific ideas for Configurtion tools =-
* Build links into setting variables that will trigger function calls
* Warn more gracefully if a variable/const name is used more than once?
* Build an HTML object to automatically allow adjustment of settings in a running ap.
* Allow other commands to redirect the rest of the line to a specific object for processing.
* Auto-generation of config file entries beyond just "set"

-= Documentation =-
* How to setup and use the config tools.
* Basic idea of Kinetic Wrappers and how to use them.

-= Librarys to consider wrapping =-
FabricJS
PaperJS -- VERY impressive demos!!  (PLUS best benchmarks next to native canvas)
oCanvas

http://www.graphdracula.net/  - build vertices & edges easily!
Box2D
Processing.JS
ChartJS
jqPlot
JQuery Sparklines -- Inline graphs

-= Frameworks to consider wrapping =-
Ionic
Ember -- read strong arguments from developer; built to be practical in getting good aps fast.
