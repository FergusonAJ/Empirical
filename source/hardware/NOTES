Below is a levelized list of the main components of a virtual CPU.

InstNode - Information about a single instruction in a genome (id and possible arguments.)

LinearCode - A vector of InstNode (do we even need a class?)

HardwareState - A collection of CPU components (registers, stacks, memory, etc)

InstLib - A library that map instruction names to functions (that take the InstNode and
	HardwareState to modify.

Processor - Derived from InstLib; takes a HardwareState, and a LinearCode and runs that code
	(The code is translated with the InstLib and modified the HardwareState)


THIS STILL RUNS INTO PROBLEMS!
* In order for instructions to be able to modify flow control, they need to know about the genome,
  and may need access to processor components.  It will be challenging to not let instructions to
  know about processor.

* An alternative plan might be to make the Processor a BASE class for a Hardware.  Then, all of
  the core functionality can be there, and anything can be overridden if needed.  The final
  processor can have a templated base class that knows how to deal wth always using the derived
  hardware...
